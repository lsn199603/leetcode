"""
给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。
子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。

示例 1：
输入：s = "bbbab"
输出：4
解释：一个可能的最长回文子序列为 "bbbb" 。
1. 确定dp数组及下标的含义
dp[i][j]:字符串S在[i,j]范围内最长的回文子序列的长度为dp[i][j]
2.确定递推公式
在判断回文子串中，关键逻辑就是看s[i]与s[j]是否相同
如果s[i]与s[j]相同，那么dp[i][j]= dp[i+1][j-1] +2
如果s[i]与s[j]不相同，说明s[i]和s[j]的同时加入并不能增加[i,j]区间回文子串的长度，
那么分别加入s[i]、s[j]看看哪一个可以组成最长的回文子序列。
加入s[j]的回文子序列的长度为dp[i+1][j]
加入s[i]的回文子序列的长度为dp[i][j-1]
dp[i][j]一定取最大的，即:dp[i][j] = max(dp[i+1][j], dp[i][j-1])
3.确定初始化,i=j时,子序列长度为1，其他为0
4.确定遍历顺序
依赖于下边和左边的元素,从下到上，从左到右
"""
s = "bbbab"
length = len(s)
# 1. 构造dp数组
dp = [[0] * length for _ in range(length)]
# 2. dp数组初始化
for i in range(length):
    dp[i][i] = 1
# 3.遍历顺序为从下到上，从左到右
for i in range(length-1, -1, -1):
    for j in range(i+1, length):
        if s[i] == s[j]:
            dp[i][j] = dp[i+1][j-1] + 2
        else:
            dp[i][j] = max(dp[i+1][j], dp[i][j-1])
print(dp[0][-1])
